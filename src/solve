#!/usr/bin/python
__author__ = "Erich L Foster <erichlf@gmail.com>"
__date__ = "2014-10-16"
__license__ = "GNU GPL version 3 or any later version"
#
#   adapted from ns in nsbench originally developed by
#   Anders Logg <logg@simula.no>
#

import sys
from time import time
import re

from AFES import *
from problems import Problem, problems
from solvers import Solver, solvers

Default_Solver = 'NSE'
Default_Problem = 'Cylinder'

#  Print usage
def usage():
    print """\
Usage: solve solver problem (run solver for given problem)
solve solver (run solver for """ + Default_Problem + """.)
solve problem (run """ + Default_Solver + """ for problem.)

Options are submitting in the form option=value

Available solvers:
%s

Available problems:
%s

Available options: (option = default value)
%s
""" % ('\n'.join('  ' + s for s in solvers),
       '\n'.join('  ' + p for p in problems),
       '\n'.join('  ' + key + ' = ' + str(value)
                 for key, value in OPTIONS.iteritems()))


#   Parse command-line arguments and run solver.
def main(args):
    # Extract arguments (note: don't change the order here!)
    params = [arg for arg in args if "=" in arg]
    args = [arg for arg in args if "=" not in arg]

    # Decide list of problems and solvers based on command-line arguments
    if len(args) < 1:
        usage()
        return 1
    elif len(args) == 1 and args[0] in problems:
        solver_name = Default_Solver
        problem_name = args[0]
    elif len(args) == 1 and args[0] in solvers:
        solver_name = args[0]
        problem_name = Default_Problem
    elif len(args) == 2 and args[0] in solvers and args[1] in problems:
        solver_name, problem_name = args[:2]
    else:
        usage()
        return 1

    # Get options
    options = OPTIONS.copy()
    for parameter in params:
        try:
            key, value = parameter.split('=', 1)
            try:
                options[key] = eval(value)
            except:
                options[key] = str(value)
        except:
            print 'Warning: Unhandled command-line argument', parameter

    # Set debug level
    set_log_active(options["debug"])

    print 'Solving %s for the %s problem.' % (solver_name, problem_name)
    # Create problem and solver
    solver = Solver(solver_name, options)
    problem = Problem(problem_name, options)

    # Solve problem with solver
    wct = time()
    w = solver.solve(problem)

    # Compute elapsed time
    wct = time() - wct

    sys.stdout.flush()
    sys.stdout.write('\033[K')
    print 'Solved %s for the %s problem in %g seconds.' % (solver_name,
                                                           problem_name, wct)

    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
