#!/usr/bin/python3
__author__ = "Erich L Foster <erichlf@gmail.com>"
__date__ = "2018-12-26"
__license__ = "GNU GPL version 3 or any later version"
#
#   adapted from ns in nsbench originally developed by
#   Anders Logg <logg@simula.no>
#

import sys
from argparse import ArgumentParser, RawTextHelpFormatter
from time import time

from ASP import *
from problems import Problem, problems
from solvers import Solver, solvers

Default_Solver = 'NSE'
Default_Problem = 'Cylinder'

options = OPTIONS.copy()


def parse_args(args):
    parser = ArgumentParser(description='Solve the given solver-problem combination',
                            formatter_class=RawTextHelpFormatter)

    parser.add_argument('solver', type=str, default=Default_Solver,
                        help='Available solvers:\n' +
                             '{}'.format('\n'.join('  ' + s for s in solvers)))
    parser.add_argument('problem', type=str, default=Default_Problem,
                        help='Available problems:\n' +
                             '{}'.format('\n'.join('  ' + p for p in problems)))
    parser.add_argument('options', nargs='*',
                        help='Some Available options:\n' + 
                             '{}'.format('\n'.join('  ' + o for o in options)))

    args = parser.parse_args()

    return args


#   Parse command-line arguments and run solver.
def main(solver_name, problem_name, params):
    # Get options
    if params is not None:
        for parameter in params:
            try:
                key, value = parameter.split('=', 1)
                try:
                    options[key] = eval(value)
                except:
                    options[key] = str(value)
            except:
                print('Warning: Unhandled command-line argument', parameter)

    print('Solving {} for the {} problem.'.format(solver_name, problem_name))
    # Create problem and solver
    problem = Problem(problem_name, options)
    solver = Solver(solver_name, options)

    # Solve problem with solver
    wct = time()
    w = solver.solve(problem)

    # Compute elapsed time
    wct = time() - wct

    sys.stdout.flush()
    sys.stdout.write('\033[K')
    print('Solved {} for the {} problem in {:g} seconds.'.format(solver_name,
                                                                 problem_name,
                                                                 wct))

    return 0

if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    sys.exit(main(args.solver, args.problem, args.options))
